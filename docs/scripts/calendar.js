    // A PHP-b≈ël √°tadott pomodoro adatok
    const pomodoroData = JSON.parse(document.getElementById('pomodoro-data').textContent);

    console.log(pomodoroData);  // Ellen≈ërz√©s a konzolban

    // Az elemek kinyer√©se a DOM-b√≥l
    const calendar = document.getElementById('calendar');
    const currentMonthDisplay = document.getElementById('current-month');
    const prevMonthButton = document.getElementById('prev-month');
    const nextMonthButton = document.getElementById('next-month');

    let currentDate = new Date(); // Kezdeti d√°tum (aktu√°lis d√°tum)

    const daysOfWeek = ["H", "K", "Sze", "Cs", "P", "Szo", "V"];
    const months = ["Janu√°r", "Febru√°r", "M√°rcius", "√Åprilis", "M√°jus", "J√∫nius", "J√∫lius", "Augusztus", "Szeptember", "Okt√≥ber", "November", "December"];

    // Napt√°r gener√°l√°sa
    function generateCalendar(month, year) {
        calendar.innerHTML = ''; // Napt√°r t√∂rl√©se

        const firstDayOfMonth = new Date(year, month, 1); // Az adott h√≥nap els≈ë napja
        const daysInMonth = new Date(year, month + 1, 0).getDate(); // Az adott h√≥nap napjainak sz√°ma
        const firstDayOfWeek = (firstDayOfMonth.getDay() + 6) % 7; // Els≈ë h√©t napja (H√©tf≈ë = 0)

        currentMonthDisplay.textContent = `${year}. ${months[month]}`;

        // A h√©t napjainak feliratai
        daysOfWeek.forEach(day => {
            const dayHeader = document.createElement('div');
            dayHeader.classList.add('day-header');
            dayHeader.textContent = day;
            calendar.appendChild(dayHeader);
        });

        // Az el≈ëz≈ë h√≥nap napjai
        const daysInPrevMonth = new Date(year, month, 0).getDate();
        for (let i = firstDayOfWeek - 1; i >= 0; i--) {
            const prevMonthDay = document.createElement('div');
            prevMonthDay.classList.add('day', 'other-month');
            prevMonthDay.textContent = daysInPrevMonth - i;
            calendar.appendChild(prevMonthDay);
        }

        // A jelenlegi h√≥nap napjai
        for (let day = 1; day <= daysInMonth; day++) {
            const dayElement = document.createElement('div');
            dayElement.classList.add('day');
            dayElement.textContent = day;

            const currentDateObj = new Date(year, month, day); // Az aktu√°lis nap d√°tuma
            const dateString = formatDate(currentDateObj); // Form√°zott d√°tum (YYYY-MM-DD)

            // Ha van Pomodoro ciklus ezen a napon, hozz√°adjuk a paradicsomot
            if (pomodoroData[dateString]) {
                for (let i = 0; i < pomodoroData[dateString]; i++) {
                    const tomato = document.createElement('span');
                    tomato.classList.add('tomato');
                    tomato.textContent = 'üçÖ';
                    dayElement.appendChild(tomato);
                }
            }

            // Ha ma van
            const today = new Date();
            if (today.toDateString() === currentDateObj.toDateString()) {
                dayElement.classList.add('today');
            }

            // Ha vas√°rnap van
            if (currentDateObj.getDay() === 0) {
                dayElement.classList.add('sunday');
            }

            // Napt√°r napj√°hoz hozz√°adjuk az elemet
            calendar.appendChild(dayElement);
        }

        // Seg√©df√ºggv√©ny a d√°tum form√°z√°s√°hoz (YYYY-MM-DD form√°tum)
    function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    // Gomb esem√©nyek
    prevMonthButton.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
    });

    nextMonthButton.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
    });